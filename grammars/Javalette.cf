Program.		Prog	::=	[FunDef] ;
Function.		FunDef	::=	Type Ident "(" [Arg] ")" Instr1 ;

IntType.		Type	::=	"int" ;
DoubleType.		Type	::=	"double" ;
VoidType.		Type	::=	"void" ;
BoolType.		Type	::=	"boolean" ;

FunctionArg.		Arg	::=	Type Ident ;

CompoundInstr.		Instr1	::=	"{" [Instr2] "}" ;
_.			Instr2	::=	Instr ;
InnerFunction.		Instr2	::=	FunDef ;
_.			Instr	::=	Instr1 ;
ReturnInstr.		Instr	::=	"return" ";" ;
ReturnExprInstr.	Instr	::=	"return" Expr ";" ;
DeclInstr.		Instr	::=	Type [Decl] ";" ;
ConditionalIf.		Instr	::=	"if" "(" Expr ")" Instr;
ConditionalIfElse.	Instr	::=	"if" "(" Expr ")" Instr "else" Instr ;
ExpressionInstr.	Instr	::=	Expr ";" ;
ForLoop.		Instr	::=	"for" "(" [Expr] ";" [Expr] ";" [Expr] ")" Instr ;
WhileLoop.		Instr	::=	"while" "(" Expr ")" Instr ;

OnlyDeclarator.		Decl	::=	Ident ;
InitDeclarator.		Decl	::=	Ident "=" Expr ;
ArrayDeclarator.	Decl	::=	Ident "[" Expr "]" ;


IdentAssigment.		Expr	::=	Ident "=" Expr ;
ArrayAssigment.		Expr	::=	Ident "[" Expr "]" "=" Expr ;
PostDecrement.		Expr1	::=	Ident "--" ;
PostIncrement.		Expr1	::=	Ident "++" ;
Cast.			Expr2	::=	"(" Type ")" Expr11 ;
LogExprOr.		Expr3	::=	Expr3 "||" Expr4 ;
LogExprAnd.		Expr4	::=	Expr4 "&&" Expr5 ;
LogExprEq.		Expr5	::=	Expr5 "==" Expr6 ;
LogExprNeq.		Expr5	::=	Expr5 "!=" Expr6 ;
RelExprL.		Expr6	::=	Expr6 "<" Expr7 ;
RelExprG.		Expr6	::=	Expr6 ">" Expr7 ;
RelExprLe.		Expr6	::=	Expr6 "<=" Expr7 ;
RelExprGe.		Expr6	::=	Expr6 ">=" Expr7 ;
AddExpr.		Expr7	::=	Expr7 "+" Expr8 ;
DecExpr.		Expr7	::=	Expr7 "-" Expr8 ;
MulExpr.		Expr8	::=	Expr8 "*" Expr9 ;
DivExpr.		Expr8	::=	Expr8 "/" Expr9 ;
ModExpr.		Expr8	::=	Expr8 "%" Expr9 ;
NegExpr.		Expr9	::=	"!" Expr9 ;
PlusExpr.		Expr9	::=	"+" Expr9 ;
MinusExpr.		Expr9	::=	"-" Expr9 ;
FunctionCall.		Expr10	::=	Ident "(" [Expr] ")" ;
ArrayAccess.		Expr11	::=	Ident "[" Expr "]" ;
IdentExpr.		Expr11	::=	Ident ;
LiteralExpr.		Expr11	::=	Literal ;

LiteralInteger.		Literal	::=	Integer ;
LiteralDouble.		Literal ::=	Double ;
LiteralString.		Literal ::=	String ;
LiteralBoolean.		Literal	::=	Boolean ;

token			Boolean		{"true"}|{"false"} ;

coercions		Expr		11;

terminator nonempty	FunDef		"" ;
separator		Arg 		"," ;
separator		Instr2		"" ;
separator nonempty	Decl		"," ;
separator		Expr		"," ;


comment			"//" ;
comment			"/*" "*/" ;
comment			"#" ;

entrypoints		Prog ;
